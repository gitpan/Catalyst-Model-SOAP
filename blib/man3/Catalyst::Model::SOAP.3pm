.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Model::SOAP 3pm"
.TH Catalyst::Model::SOAP 3pm "2009-05-29" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Model::SOAP \- Map a WSDL to a catalyst model class.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  {# In the model class...
\&      package MyApp::Model::SOAP;
\&      use base qw(Catalyst::Model::SOAP);
\&
\&      _\|_PACKAGE_\|_\->config\->{transport} = XML::Compile::Transport::SOAPHTTP(...);
\&
\&      _\|_PACKAGE_\|_\->register_wsdl(\*(Aqhttp://foo.bar/baz.wsdl\*(Aq, \*(AqBaz\*(Aq);
\&      _\|_PACKAGE_\|_\->register_wsdl(\*(Aqhttp://baz.bar/foo.wsdl\*(Aq, \*(AqFoo\*(Aq);
\&      _\|_PACKAGE_\|_\->register_wsdl(\*(Aqhttp://baz.bar/foo.wsdl\*(Aq,
\&                                 { \*(AqPortName1\*(Aq => \*(AqClass1\*(Aq,
\&                                   \*(AqPortName2\*(Aq => \*(AqClass2\*(Aq});
\&
\&      # use several wsdl files
\&      _\|_PACKAGE_\|_\->register_wsdl([ $file1, $file2, $file3 ], \*(AqBaz\*(Aq);
\&
\&      # and or register schemas
\&      _\|_PACKAGE_\|_\->register_wsdl({ wsdl => $scalar_or_array,
\&            schema => $scalar_or_array }, \*(AqBla\*(Aq);
\&  };
\&  {# later in some other class..
\&     $c\->model(\*(AqSOAP::Baz\*(Aq)\->getWeather(%arguments);
\&     # is then dispatched to the operation getWeather described by the
\&     # first wsdl...
\&     $c\->model(\*(AqSOAP::Foo\*(Aq)\->foo(%arguments);
\&     # is then dispatched to the operation foo described by the
\&     # second wsdl...
\&  };
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
Create a catalyst model class from a \s-1WSDL\s0 definition using
XML::Compile::SOAP.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a mapping from a wsdl definition, interpreted
by XML::Compile::SOAP::WSDL, as a Model class, where each operation in
the wsdl file is represented by a method with the same name.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "register_wsdl($wsdl, $targetclass)" 4
.el .IP "register_wsdl($wsdl, \f(CW$targetclass\fR)" 4
.IX Item "register_wsdl($wsdl, $targetclass)"
This method will register the operations described by \f(CW$wsdl\fR in the
\&\f(CW$targetclass\fR package. \f(CW$wsdl\fR may be anythin XML::Compile::SOAP::WSDL11
accepts. The \f(CW$targetclass\fR is a relative package name which will be
concatenated in the name of the model.
.Sp
If \f(CW$wsdl\fR is an arrayref, the first element is the one passed to new,
and the others will be the argument to subsequent addWsdl calls.
.Sp
If \f(CW$wsdl\fR is a hashref, the \*(L"wsdl\*(R" key will be handled like above and
the \*(L"schema\*(R" key will be used to importDefinitions. If the content of
the schema key is an arrayref, it will result in several calls to
importDefinition.
.Sp
Note that XML::Compile\->knownNamespace(...) can be used to help
declaring the wsdl.
.Sp
You can send a hashref for the \f(CW$targetclass\fR. Catalyst::Model::SOAP
will use the key as the port name and the value as the class to
install the operations available in that specific port.
.Sp
If this wsdl describes more than one service, you might want to use
the \*(L"service\*(R" config key to declare the service name.
.Sp
You can also set the transport object (which will be later be used in
a compileClient call). This way you can define transports for
different protocols.
.SH "ACCESSORS"
.IX Header "ACCESSORS"
For each operation, a secondary method called _$operation_data is
created. This method returns a list composed by the \s-1WSDL\s0 object, the
operation object and the compiled code ref.
.SH "INVOCATION"
.IX Header "INVOCATION"
The invocation schema for each operation is documented in
XML::Compile::SOAP. Each method is a closure that will call the
coderef with the parameters ($self excluded).
.SH "XML::Compile::SOAP x SOAP::WSDL"
.IX Header "XML::Compile::SOAP x SOAP::WSDL"
For this module, there were two options on the \s-1SOAP\s0 client
implementation. XML::Compile::SOAP and \s-1SOAP::WSDL\s0. While both
implement all the features expected by this module, the reason to
choose XML::Compile::SOAP over \s-1SOAP::WSDL\s0 resides in the hability to
support the specs more closely in the future. And also to provide a
better support to handle literal \s-1XML\s0 messages. As the \s-1SOAP::WSDL\s0
documentation already states, XML::Compile::SOAP provides an approach
much more extensible and close to the specs than \s-1SOAP::WSDL\s0.
.PP
Another version of this module may be implemented in the future
supporting the other module, but, as for the relationship between
Catalyst::Controller::SOAP and Catalyst::Model::SOAP,
XML::Compile::SOAP seems to make more sense.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Controller::SOAP, XML::LibXML, XML::Compile::SOAP
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel Ruoso \f(CW\*(C`daniel@ruoso.com\*(C'\fR
.SH "BUG REPORTS"
.IX Header "BUG REPORTS"
Please submit all bugs regarding \f(CW\*(C`Catalyst::Model::SOAP\*(C'\fR to
\&\f(CW\*(C`bug\-catalyst\-model\-soap@rt.cpan.org\*(C'\fR
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.
